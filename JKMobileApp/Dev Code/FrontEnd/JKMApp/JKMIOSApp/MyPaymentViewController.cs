// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using CoreGraphics;
using Foundation;
using JKMPCL.Common;
using JKMPCL.Model;
using JKMPCL.Services;
using JKMPCL.Services.Estimate;
using JKMPCL.Services.Payment;
using UIKit;

namespace JKMIOSApp
{
    /// <summary>
    /// Controller Name : MyPaymentViewController
    /// Author          : Hiren Patel
    /// Creation Date   : 16 JAN 2018
    /// Purpose         : To display my payment page screen as app shell screen
    /// Revision        : 
    /// </summary>
    public partial class MyPaymentViewController : UIViewController
    {
        private readonly EstimateValidateServices estimateValidateServices;
        private readonly Payment payment;
        private PaymentModel paymentModel;
        int Cardcounnter = 1;
        private bool isFormatCardNumber = true;

        public MyPaymentViewController(IntPtr handle) : base(handle)
        {
            estimateValidateServices = new EstimateValidateServices();
            payment = new Payment();
            paymentModel = new PaymentModel();
        }
        public async override void ViewDidLoad()
        {
            base.ViewDidLoad();
            ResetData();
            InitilizeIntarface();
            BindEventToControll();

            UIHelper.DismissKeyboardOnBackgroundTap(this);
            UIHelper.DismissKeyboardOnUITextField(txtCVV);
            UIHelper.DismissKeyboardOnUITextField(txtCardNumber);
            UIHelper.DismissKeyboardOnUITextField(txtAmount);
            UIHelper.SetUiTextFieldAsNumberOnly(txtCVV, 3);

            UIHelper.SetUiTextFieldAsCreditCardNumber(txtCardNumber, 19);
            UIHelper.SetUiTextFieldAsAlphabetOnly(txtNameOfCardHolder);
            UIHelper.SetUiTextFieldAsAmount(txtAmount);


            lblTotalCost.Text = string.Empty;
            lblDepositCollected.Text = string.Empty;
            lblTotalPaid.Text = string.Empty;
            lblTotalDue.Text = string.Empty;

            scrollViewPaymentSubmitted.Hidden = true;
            BindExpiryDateToDatePicker();

            scrollViewSwipeCard.Scrolled += (object sender, EventArgs e) =>
            {
                ResetData();
                BindPaymentData();
            };

          

            EnableDisableButton(btnAddAnotherCard, false);
            EnableDisableButton(btnClose, false);
            uiDatePicker.MinimumDate = Extensions.DateTimeToNSDate(DateTime.Today);
            uiDatePicker.MinimumDate = Extensions.DateTimeToNSDate(DateTime.Today.AddYears(40));
        }

        public async override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            NavigationController.NavigationBarHidden = true;
            ResetData();
            await PopulateData();
            BindPaymentData();
        }
        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

        /// <summary>
        /// Method Name     : BindEventToControll
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : Binds the event to controll.
        /// Revision        : 
        /// </summary>
        private void BindEventToControll()
        {
            btnAlert.TouchUpInside += BtnAlert_TouchUpInside;
            btnContactUs.TouchUpInside += BtnContactUs_TouchUpInside;
            btnMakePayment.TouchUpInside += BtnMakePayment_TouchUpInside;
            btnClose.TouchUpInside += BtnClose_TouchUpInside;
            btnAddAnotherCard.TouchUpInside += BtnAddAnotherCard_TouchUpInside;
            txtCardNumber.EditingChanged += txtCardNumber_EditingChanged;
        }

        /// <summary>
        /// Method Name     : InitilizeIntarface
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To Initilizes the intarface.
        /// Revision        : 
        /// </summary>
        private void InitilizeIntarface()
        {
            // InitilizeIntarface
            UIHelper.DismissKeyboardOnBackgroundTap(this);
            UIHelper.DismissKeyboardOnUITextField(txtAmount);
            UIHelper.DismissKeyboardOnUITextField(txtNameOfCardHolder);
            UIHelper.DismissKeyboardOnUITextField(txtCardNumber);
            UIHelper.DismissKeyboardOnUITextField(txtExpiredDate);
            UIHelper.DismissKeyboardOnUITextField(txtCVV);

            UIHelper.SetDefaultScrollViewBorderProperty(scrollviewTotalCost);
            UIHelper.SetDefaultScrollViewBorderProperty(scrollViewMakePayment);
            UIHelper.SetDefaultScrollViewBorderProperty(scrollViewPaymentSubmitted);

            btnClose.Layer.CornerRadius = btnClose.Layer.Frame.Height / 2;
            btnAddAnotherCard.Layer.CornerRadius = btnAddAnotherCard.Layer.Frame.Height / 2;
            viewDepositCollected.Layer.CornerRadius = 7;

            scrollViewPaymentSubmitted.Frame = scrollViewMakePayment.Frame;
        }

        /// <summary>
        /// Method Name     : ResetData
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : Resets the data.
        /// Revision        : 
        /// </summary>
        private void ResetData()
        {
            txtCardNumber.Text = string.Empty;
            txtCVV.Text = string.Empty;
            txtExpiredDate.Text = string.Empty;
            txtNameOfCardHolder.Text = string.Empty;
            txtAmount.Text = string.Empty;
            imgPaymentCardType.Image = UIImage.FromFile(UIHelper.GetPaymentCardImage(txtCardNumber.Text));
        }

        /// <summary>
        /// Method Name     : ResetData
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : Resets the data.
        /// Revision        : 
        /// </summary>
        private void ResetControlState(bool IsEditMode)
        {
            txtCardNumber.Enabled = IsEditMode;
            txtCVV.Enabled = IsEditMode;
            txtExpiredDate.Enabled = IsEditMode;
            txtNameOfCardHolder.Enabled = IsEditMode;
            txtAmount.Enabled = IsEditMode;
        }

        /// <summary>
        /// Method Name     : BindExpiryDateToDatePicker
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : Binds the expiry date to date picker.
        /// Revision        : 
        /// </summary>
        private void BindExpiryDateToDatePicker()
        {
            SetTapEventToExpiryTextBox();
            btnOK.TouchUpInside += BtnOK_TouchUpInside;
            btnCancel.TouchUpInside += BtnCancel_TouchUpInside;
            scrollViewDatePicker.Hidden = true;
        }

        /// <summary>
        /// Method Name     : SetTapEventToExpiryTextBox
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the tap event to expiry date text box.
        /// Revision        : 
        /// </summary>
        private void SetTapEventToExpiryTextBox()
        {
            UITapGestureRecognizer txtExpiredDateTap = new UITapGestureRecognizer(() =>
            {
                scrollViewDatePicker.Hidden = false;
                scrollViewDatePicker.Frame = scrollViewMakePayment.Frame;

            });
            txtExpiredDate.AddGestureRecognizer(txtExpiredDateTap);

        }

        /// <summary>
        /// Event Name      : BtnOK_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirec to back screen
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnOK_TouchUpInside(object sender, EventArgs e)
        {
            NSDate selectedDate = uiDatePicker.Date;
            scrollViewDatePicker.Hidden = true;
            string date = UIHelper.DisplayDateFormatForCardExpiryDate(selectedDate.NSDateToDateTime());
            txtExpiredDate.Text = date;
        }

        /// <summary>
        /// Event Name      : BtnCancel_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : hide date picker
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnCancel_TouchUpInside(object sender, EventArgs e)
        {
            scrollViewDatePicker.Hidden = true;
        }

        /// <summary>
        /// Method Name     : ShowPaymentStatus
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Shows the payment status.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentStatus">If set to <c>true</c> payment status.</param>
        private void ShowPaymentStatus(bool paymentStatus)
        {
            if (paymentStatus)
            {
                lblPaymentStatus.Text = AppConstant.PAYMENT_STATUS_SUCCESS_TITLE;
                lblPaymentStatus.TextColor = UIColor.FromRGB(48, 212, 213);
                imgPaymentStatus.Image = UIImage.FromFile(AppConstant.PAYMENT_STATUS_SUCCESS_IMAGE_URL);
                lblPaymentStatusMessageLine1.Text = AppConstant.PAYMENT_STATUS_SUCCESS_MSG_LINE1;
                lblPaymentStatusMessageLine2.Text = AppConstant.PAYMENT_STATUS_SUCCESS_MSG_LINE2;

                nfloat Y = (viewPaymentAmountPaid.Frame.Y - viewTransaction.Frame.Height);
                nfloat X = viewTransaction.Frame.X;
                viewTransaction.Frame = new CGRect(X, Y, viewTransaction.Frame.Width, viewTransaction.Frame.Height);
                viewPaymentAmountPaid.Hidden = false;
            }
            else
            {
                lblPaymentStatus.Text = AppConstant.PAYMENT_STATUS_FAILED_TITLE;
                lblPaymentStatus.TextColor = UIColor.FromRGB(237, 60, 97);
                imgPaymentStatus.Image = UIImage.FromFile(AppConstant.PAYMENT_STATUS_FAILED_IMAGE_URL);
                lblPaymentStatusMessageLine1.Text = AppConstant.PAYMENT_STATUS_FAILED_MSG_LINE1;
                lblPaymentStatusMessageLine2.Text = AppConstant.PAYMENT_STATUS_FAILED_MSG_LINE2;
                viewTransaction.Frame = viewPaymentAmountPaid.Frame;
                viewPaymentAmountPaid.Hidden = true;
            }
            BindPaymentData();
            AddPaymetStatusCard();
        }

        /// <summary>
        /// Method Name     : EnableDisableButton
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Enables the disable button.
        /// Revision        : 
        /// </summary>
        /// <param name="uiButton">User interface button.</param>
        /// <param name="Isenable">If set to <c>true</c> isenable.</param>
        private void EnableDisableButton(UIButton uiButton, bool Isenable)
        {
            uiButton.Layer.Opacity = Isenable ? 1 : AppConstant.BUTTON_ADD_ANOTHER_CARD_OPACITY;
            uiButton.Enabled = Isenable;
        }

        /// <summary>
        /// Method Name     : BindPaymentData
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Binds the payment data.
        /// Revision        : 
        /// </summary>
        private void BindPaymentData()
        {
            if (paymentModel is null)
            {
                paymentModel = new PaymentModel() { TotalCost = "0", TotalPaid = "0", Deposit = "0" };
            }
            decimal totalCost = 0;
            decimal totalPaid = 0;

            lblTotalCost.Text = UtilityPCL.CurrencyFormat(paymentModel.TotalCost);
            lblTotalPaid.Text = UtilityPCL.CurrencyFormat(paymentModel.TotalPaid);
            lblDepositCollected.Text = UtilityPCL.CurrencyFormat(paymentModel.Deposit);

            if (!string.IsNullOrEmpty(paymentModel.TotalCost))
            {
                totalCost = Convert.ToDecimal(paymentModel.TotalCost);
            }
            if (!string.IsNullOrEmpty(paymentModel.TotalPaid))
            {
                totalPaid = Convert.ToDecimal(paymentModel.TotalPaid);
            }

            lblTotalDue.Text = UtilityPCL.CurrencyFormat(Convert.ToString(totalCost - totalPaid));
            txtAmount.Text = Convert.ToString(totalCost - totalPaid);

            if (totalCost <= totalPaid || string.IsNullOrEmpty(DTOConsumer.dtoMoveData.MoveNumber))
            {
                EnableDisableButton(btnMakePayment, false);
                EnableDisableButton(btnClose, false);
                EnableDisableButton(btnAddAnotherCard, false);
                ResetControlState(false);
                txtAmount.Text = string.Empty;
            }
            else if (scrollViewSwipeCard.ContentOffset.X == 0 && Cardcounnter > 1)
            {
                EnableDisableButton(btnAddAnotherCard, false);
                EnableDisableButton(btnClose, true);
                ResetControlState(true);
            }
            else
            {
                EnableDisableButton(btnAddAnotherCard, true);
                EnableDisableButton(btnClose, false);
                ResetControlState(true);
            }
        }

        /// <summary>
        /// Event Name      : BtnContactUs_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirect contactus page
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnContactUs_TouchUpInside(object sender, EventArgs e)
        {
            PerformSegue("paymentToContactUs", this);
        }

        /// <summary>
        /// Event Name      : BtnAlert_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirect notification
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnAlert_TouchUpInside(object sender, EventArgs e)
        {
            PerformSegue("notification", this);
        }

        /// <summary>
        /// Event Name      : BtnMakePayment_TouchUpInsidet
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : To redirec to back screen as valuation.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private async void BtnMakePayment_TouchUpInside(object sender, EventArgs e)
        {
            PaymentGatewayModel paymentGatewayModel = new PaymentGatewayModel();
            UIHelper.BindCardHolderNameToPaymentModel(paymentGatewayModel, txtNameOfCardHolder.Text);
            UIHelper.BindCardNumberToPaymentModel(paymentGatewayModel, txtCardNumber.Text);
            UIHelper.BindCVVToPaymentModel(paymentGatewayModel, txtCVV.Text);
            UIHelper.BindExpiryDateToPaymentModel(paymentGatewayModel, txtExpiredDate.Text);
            UIHelper.BindDepositToPaymentModel(paymentGatewayModel, txtAmount.Text);
            paymentGatewayModel.CustomerID = UtilityPCL.LoginCustomerData.CustomerId;
            paymentGatewayModel.EmailID = UtilityPCL.LoginCustomerData.EmailId;

            if (!string.IsNullOrEmpty(txtAmount.Text))
            {
                paymentGatewayModel.TransactionAmout = Convert.ToDouble(txtAmount.Text);
                double totlDueAmount = Convert.ToDouble(UtilityPCL.RemoveCurrencyFormat(lblTotalDue.Text));
                if (paymentGatewayModel.TransactionAmout > totlDueAmount)
                {
                    UIHelper.ShowMessage(AppConstant.PAYMENT_TOTAL_DUE_AMOUNT_LESS_THAN_TOTAL_COST);
                    return;
                }
            }
            else
            {
                UIHelper.ShowMessage(AppConstant.PAYMENT_TRANSACTION_AMOUNT_IS_REQUIRED);
                return;
            }

            string message = estimateValidateServices.ValidatePaymentModel(paymentGatewayModel);
            if (string.IsNullOrEmpty(message))
            {
                await callPaymentService(paymentGatewayModel);
            }
            else
            {
                UIHelper.ShowMessage(message);
            }

        }

        /// <summary>
        /// Method Name     : callPaymentService
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Calls the payment service.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private async Task callPaymentService(PaymentGatewayModel paymentGatewayModel)
        {
            APIResponse<PaymentTransactonModel> serviceResponse = new APIResponse<PaymentTransactonModel>() { STATUS = false };
            string errorMessage = string.Empty;
            LoadingOverlay loadingOverlay = UIHelper.ShowLoadingScreen(View);
            try
            {
                serviceResponse = await payment.ProcessPaymentTransaction(paymentGatewayModel);
                if (serviceResponse.STATUS)
                {
                    if (serviceResponse.DATA != null)
                    {
                        lblTransactionId.Text = serviceResponse.DATA.TransactionID;
                        lblPaymentStatusAmountPaid.Text = UtilityPCL.CurrencyFormat(Convert.ToString(paymentGatewayModel.TransactionAmout));
                        await CallPostPaymentTransaction(serviceResponse.DATA, paymentGatewayModel);
                    }
                }
                else
                {
                    errorMessage = serviceResponse.Message;

                    if (serviceResponse.DATA != null)
                    {
                        lblTransactionId.Text = serviceResponse.DATA.TransactionID;
                    }
                }



            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                loadingOverlay.Hide();
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    await UIHelper.ShowMessageWithOKConfirm(string.Empty, errorMessage, AppConstant.ALERT_OK_BUTTON_TEXT);
                }
            }

            ShowPaymentStatus(serviceResponse.STATUS);
        }

        /// <summary>
        /// Method Name     : CallPostPaymentTransaction
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Calls the post payment transaction.
        /// Revision        : 
        /// </summary>
        /// <returns>The post payment transaction.</returns>
        /// <param name="paymentTransactonModel">Payment transacton model.</param>
        /// <param name="paymentGatewayModel">payment gateway model.</param>
        private async Task CallPostPaymentTransaction(PaymentTransactonModel paymentTransactonModel, PaymentGatewayModel paymentGatewayModel)
        {
            APIResponse<PaymentModel> serviceResponse = new APIResponse<PaymentModel>() { STATUS = false };
            string errorMessage = string.Empty;
            try
            {
                paymentModel.CustomerID = paymentGatewayModel.CustomerID;
                paymentModel.MoveID = DTOConsumer.dtoMoveData.MoveNumber;
                paymentModel.TransactionNumber = paymentTransactonModel.TransactionID;
                paymentModel.TransactionDate = UIHelper.DisplayDateFormatForEstimate(DateTime.Now);
                paymentModel.CustomerID = paymentGatewayModel.CustomerID;
                paymentModel.TransactionAmount = Convert.ToString(paymentGatewayModel.TransactionAmout);
                CalculateDueAmountToPaymentModel();
                serviceResponse = await payment.PutPaymentAmount(paymentModel);

            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    await UIHelper.ShowMessageWithOKConfirm(string.Empty, errorMessage, AppConstant.ALERT_OK_BUTTON_TEXT);
                }
            }
        }

        /// <summary>
        /// Methode Name    : CalculateDueAmountToPaymentModel
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : Calculates the due amount to payment model.
        /// Revision        : 
        /// </summary>
        private void CalculateDueAmountToPaymentModel()
        {
            decimal totalCost = 0;
            decimal totalPaid = 0;
            decimal transactionAmount = 0;

            if (!string.IsNullOrEmpty(paymentModel.TransactionAmount))
            {
                transactionAmount = Convert.ToDecimal(paymentModel.TransactionAmount);
            }
            if (!string.IsNullOrEmpty(paymentModel.TotalCost))
            {
                totalCost = Convert.ToDecimal(paymentModel.TotalCost);
            }
            if (!string.IsNullOrEmpty(paymentModel.TotalPaid))
            {
                totalPaid = Convert.ToDecimal(paymentModel.TotalPaid) + transactionAmount;
                paymentModel.TotalPaid = Convert.ToString(totalPaid);
            }
            else
            {
                totalPaid = transactionAmount;
                paymentModel.TotalPaid = Convert.ToString(totalPaid);
            }
            paymentModel.TotalDue = UtilityPCL.CurrencyFormat(Convert.ToString(totalCost - totalPaid));

        }

        /// <summary>
        /// Event Name      : BtnClose_TouchUpInsidet
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : To close current payment card screen
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnClose_TouchUpInside(object sender, EventArgs e)
        {
            scrollViewSwipeCard.SetContentOffset(new CGPoint(x: (scrollViewPaymentSubmitted.Frame.Width * (Cardcounnter - 1)) + ((50 * (Cardcounnter - 1))), y: 0), animated: true);
        }

        /// <summary>
        /// Event Name      : BtnAddAnotherCard_TouchUpInsidet
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Feb 2018
        /// Purpose         : To add another card for payment process
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnAddAnotherCard_TouchUpInside(object sender, EventArgs e)
        {
            ResetData();
            scrollViewSwipeCard.SetContentOffset(new CGPoint(x: 0, y: 0), animated: true);
        }

        /// <summary>
        /// Event Name      : txtCardNumber_EditingChanged
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : To display card type image like visa or master. 
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">E.</param>
        private void txtCardNumber_EditingChanged(object sender, EventArgs e)
        {
            imgPaymentCardType.Image = UIImage.FromFile(UIHelper.GetPaymentCardImage(txtCardNumber.Text));
            SetCardFormat();
            isFormatCardNumber = true;
        }

        /// <summary>
        /// Method Name     : SetCardFormat
        /// Author          : Hiren Patel
        /// Creation Date   : 28 Feb 2018
        /// Purpose         : add "-" after each 4 digit in credit card number
        /// Revision        : 
        /// </summary>
        public void SetCardFormat()
        {
            try
            {
                if (txtCardNumber.Text.Length < 19 && isFormatCardNumber)
                {
                    string cardNumber = txtCardNumber.Text.Replace("-", "").Trim();
                    string finalCardNumber = string.Empty;

                    for (int i = 0; i < cardNumber.Length; i++)
                    {
                        if (i % 4 == 0 && i > 0)
                        {
                            finalCardNumber += "-";
                            finalCardNumber += cardNumber[i].ToString();
                            isFormatCardNumber = false;
                        }
                        else
                        {
                            finalCardNumber += cardNumber[i].ToString();
                        }
                    }

                    //assign value to txtCardNumber only in case of isFormatCardNumber is false other wise it will looped infinite and application will crash
                    if (!isFormatCardNumber)
                    {
                        txtCardNumber.Text += "-";
                        int position = txtCardNumber.Text.Length;
                        //txtCardNumber.
                        txtCardNumber.Text = finalCardNumber;
                    }
                }
            }
            catch
            {
                //To be implemented later
            }
        }




        /// <summary>
        /// Method Name     : PopulateData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : To populate data.  
        /// Revision        : 
        /// </summary>
        public async Task PopulateData()
        {
            await GetPaymentData();
        }

        /// <summary>
        /// Method Name     : GetPaymentData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : Gets the payment data. 
        /// Revision        : 
        /// </summary>
        /// <returns>The payment data.</returns>
        public async Task GetPaymentData()
        {
            paymentModel = new PaymentModel() { CustomerID = UtilityPCL.LoginCustomerData.CustomerId, MoveID = DTOConsumer.dtoMoveData.MoveNumber };

            APIResponse<PaymentModel> serviceResponse = new APIResponse<PaymentModel>() { STATUS = false };
            string errorMessage = string.Empty;
            try
            {
                LoadingOverlay loadingOverlay = UIHelper.ShowLoadingScreen(View);
                serviceResponse = await payment.GetPaymentAmount(paymentModel);
                loadingOverlay.Hide();
                if (serviceResponse.STATUS)
                {
                    if (serviceResponse.DATA != null)
                    {
                        paymentModel = serviceResponse.DATA;
                    }
                }
                else
                {
                    errorMessage = serviceResponse.Message;
                }
            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    UIHelper.ShowMessage(errorMessage);
                }
            }
            BindPaymentData();
        }

        /// <summary>
        /// Method Name     : AddPaymetStatusCard
        /// Author          : Hiren Patel
        /// Creation Date   : 27 FEB 2018
        /// Purpose         : Adds the paymet status card.
        /// Revision        : 
        /// </summary>
        private void AddPaymetStatusCard()
        {
            UIScrollView scrollView = new UIScrollView();
            scrollView.Frame = scrollViewPaymentSubmitted.Frame;
            scrollView.Add(GetPaymentStatusTitleCopy());
            scrollView.Add(GetPaymentStatusImageCopy());
            scrollView.Add(GetPaymentStatusMessageLine1Copy());
            scrollView.Add(GetPaymentStatusMessageLine2Copy());

            UIView uiviewTransactionContainer = new UIView();
            uiviewTransactionContainer.Frame = new CGRect(viewTransactionContainer.Frame.X, viewTransactionContainer.Frame.Y, viewTransactionContainer.Frame.Width, viewTransactionContainer.Frame.Height);
            uiviewTransactionContainer.AutoresizingMask = viewTransactionContainer.AutoresizingMask;

            scrollView.Add(uiviewTransactionContainer);
            uiviewTransactionContainer.Add(GetTransactionViewCopy());
            uiviewTransactionContainer.Add(GetAmountPaidViewCopy());

            nfloat Y = (scrollViewPaymentSubmitted.Frame.Y);
            nfloat X = (scrollViewPaymentSubmitted.Frame.X) + (scrollViewPaymentSubmitted.Frame.Width * Cardcounnter) + (50 * Cardcounnter);

            scrollView.Frame = new CGRect(X, Y, scrollView.Frame.Width, scrollView.Frame.Height);
            UIHelper.SetDefaultScrollViewBorderProperty(scrollView);
            scrollViewSwipeCard.AddSubview(scrollView);
            scrollViewSwipeCard.ContentSize = new CGSize(scrollViewSwipeCard.Frame.Size.Width + (scrollView.Frame.Width * Cardcounnter) + (50 * Cardcounnter), scrollViewSwipeCard.Frame.Size.Height);
            scrollViewSwipeCard.SetContentOffset(new CGPoint(x: (scrollViewPaymentSubmitted.Frame.Width * Cardcounnter) + ((50 * Cardcounnter)), y: 0), animated: true);
            Cardcounnter++;
        }

        /// <summary>
        /// Method Name     : GetPaymentStatusTitleCopy
        /// Author          : Hiren Patel
        /// Creation Date   : 26 FEB 2018
        /// Purpose         : Gets the payment status title copy.
        /// Revision        : 
        /// </summary>
        /// <returns>The payment status title copy.</returns>
        private UILabel GetPaymentStatusTitleCopy()
        {
            UILabel lblTitle = new UILabel();
            lblTitle.Frame = new CGRect(lblPaymentStatus.Frame.X, lblPaymentStatus.Frame.Y, lblPaymentStatus.Frame.Width, lblPaymentStatus.Frame.Height);
            lblTitle.Text = lblPaymentStatus.Text;
            lblTitle.TextColor = lblPaymentStatus.TextColor;
            lblTitle.Font = lblPaymentStatus.Font;
            lblTitle.TextAlignment = lblPaymentStatus.TextAlignment;
            return lblTitle;
        }

        /// <summary>
        /// Method Name     : GetPaymentStatusImageCopy
        /// Author          : Hiren Patel
        /// Creation Date   : 26 FEB 2018
        /// Purpose         : Gets the payment status image copy.
        /// Revision        : 
        /// </summary>
        /// <returns>The payment status image copy.</returns>
        private UIImageView GetPaymentStatusImageCopy()
        {
            UIImageView uiImageView = new UIImageView();
            uiImageView.ViewForBaselineLayout.Frame = new CoreGraphics.CGRect(imgPaymentStatus.Frame.X, imgPaymentStatus.Frame.Y, imgPaymentStatus.Frame.Width, imgPaymentStatus.Frame.Height);
            uiImageView.ContentMode = UIViewContentMode.ScaleAspectFit;
            uiImageView.Image = imgPaymentStatus.Image;
            return uiImageView;
        }

        /// <summary>
        /// Method Name     : GetPaymentStatusMessageLine1Copy
        /// Author          : Hiren Patel
        /// Creation Date   : 26 FEB 2018
        /// Purpose         : Gets the payment status message line1 copy.
        /// Revision        : 
        /// </summary>
        /// <returns>The payment status message line1 copy.</returns>
        private UILabel GetPaymentStatusMessageLine1Copy()
        {
            UILabel lblStatusMessageLine1 = new UILabel();
            lblStatusMessageLine1.Frame = new CGRect(lblPaymentStatusMessageLine1.Frame.X, lblPaymentStatusMessageLine1.Frame.Y, lblPaymentStatusMessageLine1.Frame.Width, lblPaymentStatusMessageLine1.Frame.Height);
            lblStatusMessageLine1.Text = lblPaymentStatusMessageLine1.Text;
            lblStatusMessageLine1.TextColor = lblPaymentStatusMessageLine1.TextColor;
            lblStatusMessageLine1.Font = lblPaymentStatusMessageLine1.Font;
            lblStatusMessageLine1.TextAlignment = lblPaymentStatusMessageLine1.TextAlignment;
            return lblStatusMessageLine1;
        }

        /// <summary>
        /// Method Name     : GetPaymentStatusMessageLine2Copy
        /// Author          : Hiren Patel
        /// Creation Date   : 26 FEB 2018
        /// Purpose         : Gets the payment status message line2 copy. 
        /// Revision        : 
        /// </summary>
        /// <returns>The payment status message line2 copy.</returns>
        private UILabel GetPaymentStatusMessageLine2Copy()
        {
            UILabel lblStatusMessageLine2 = new UILabel();
            lblStatusMessageLine2.Frame = new CGRect(lblPaymentStatusMessageLine2.Frame.X, lblPaymentStatusMessageLine2.Frame.Y, lblPaymentStatusMessageLine2.Frame.Width, lblPaymentStatusMessageLine2.Frame.Height);
            lblStatusMessageLine2.Text = lblPaymentStatusMessageLine2.Text;
            lblStatusMessageLine2.TextColor = lblPaymentStatusMessageLine2.TextColor;
            lblStatusMessageLine2.Font = lblPaymentStatusMessageLine2.Font;
            lblStatusMessageLine2.TextAlignment = lblPaymentStatusMessageLine2.TextAlignment;
            return lblStatusMessageLine2;
        }

        /// <summary>
        /// Method Name     : GetTransactionViewCopy
        /// Author          : Hiren Patel
        /// Creation Date   : 26 FEB 2018
        /// Purpose         : Gets the transaction view copy. 
        /// Revision        : 
        /// </summary>
        /// <returns>The transaction view copy.</returns>
        private UIView GetTransactionViewCopy()
        {
            UIView uiviewTransaction = new UIView();
            uiviewTransaction.Frame = new CGRect(viewTransaction.Frame.X, viewTransaction.Frame.Y, viewTransaction.Frame.Width, viewTransaction.Frame.Height);

            UIView uiviewTransactionSeparatorLine = new UIView();
            uiviewTransactionSeparatorLine.Frame = new CGRect(viewTransactionSeparatorLine.Frame.X, viewTransactionSeparatorLine.Frame.Y, viewTransactionSeparatorLine.Frame.Width, viewTransactionSeparatorLine.Frame.Height);
            uiviewTransactionSeparatorLine.BackgroundColor = viewTransactionSeparatorLine.BackgroundColor;
            uiviewTransaction.Add(uiviewTransactionSeparatorLine);

            UILabel uiLabelTransactionIDText = new UILabel();
            uiLabelTransactionIDText.Frame = new CGRect(lblTransactionIDText.Frame.X, lblTransactionIDText.Frame.Y, lblTransactionIDText.Frame.Width, lblTransactionIDText.Frame.Height);
            uiLabelTransactionIDText.Text = lblTransactionIDText.Text;
            uiLabelTransactionIDText.TextColor = lblTransactionIDText.TextColor;
            uiLabelTransactionIDText.Font = lblTransactionIDText.Font;
            uiLabelTransactionIDText.TextAlignment = lblTransactionIDText.TextAlignment;
            uiviewTransaction.Add(uiLabelTransactionIDText);

            UILabel uiLabelTransactionID = new UILabel();
            uiLabelTransactionID.Frame = new CGRect(lblTransactionId.Frame.X, lblTransactionId.Frame.Y, lblTransactionId.Frame.Width, lblTransactionId.Frame.Height);
            uiLabelTransactionID.Text = lblTransactionId.Text;
            uiLabelTransactionID.TextColor = lblTransactionId.TextColor;
            uiLabelTransactionID.Font = lblTransactionId.Font;
            uiLabelTransactionID.TextAlignment = lblTransactionId.TextAlignment;
            uiviewTransaction.Add(uiLabelTransactionID);

            return uiviewTransaction;
        }


        /// <summary>
        /// Method Name     : GetAmountPaidViewCopy
        /// Author          : Hiren Patel
        /// Creation Date   : 26 FEB 2018
        /// Purpose         : Gets the amount paid view copy. 
        /// Revision        : 
        /// </summary>
        /// <returns>The amount paid view copy.</returns>
        private UIView GetAmountPaidViewCopy()
        {
            UIView uiviewPaymentAmountPaid = new UIView();
            uiviewPaymentAmountPaid.Frame = new CGRect(viewPaymentAmountPaid.Frame.X, viewPaymentAmountPaid.Frame.Y, viewPaymentAmountPaid.Frame.Width, viewPaymentAmountPaid.Frame.Height);
            uiviewPaymentAmountPaid.Hidden = viewPaymentAmountPaid.Hidden;

            UIView uiviewPaymentAmountSeparatorLine = new UIView();
            uiviewPaymentAmountSeparatorLine.Frame = new CGRect(viewPaymentAmountSeparatorLine.Frame.X, viewPaymentAmountSeparatorLine.Frame.Y, viewPaymentAmountSeparatorLine.Frame.Width, viewPaymentAmountSeparatorLine.Frame.Height);
            uiviewPaymentAmountSeparatorLine.BackgroundColor = viewTransactionSeparatorLine.BackgroundColor;
            uiviewPaymentAmountPaid.Add(uiviewPaymentAmountSeparatorLine);

            UILabel uilblAmountPaidText = new UILabel();
            uilblAmountPaidText.Frame = new CGRect(lblAmountPaidText.Frame.X, lblAmountPaidText.Frame.Y, lblAmountPaidText.Frame.Width, lblAmountPaidText.Frame.Height);
            uilblAmountPaidText.Text = lblAmountPaidText.Text;
            uilblAmountPaidText.TextColor = lblAmountPaidText.TextColor;
            uilblAmountPaidText.Font = lblAmountPaidText.Font;
            uilblAmountPaidText.TextAlignment = lblAmountPaidText.TextAlignment;
            uiviewPaymentAmountPaid.Add(uilblAmountPaidText);

            UILabel uilblPaymentStatusAmountPaid = new UILabel();
            uilblPaymentStatusAmountPaid.Frame = new CGRect(lblPaymentStatusAmountPaid.Frame.X, lblPaymentStatusAmountPaid.Frame.Y, lblPaymentStatusAmountPaid.Frame.Width, lblPaymentStatusAmountPaid.Frame.Height);
            uilblPaymentStatusAmountPaid.Text = lblPaymentStatusAmountPaid.Text;
            uilblPaymentStatusAmountPaid.TextColor = lblPaymentStatusAmountPaid.TextColor;
            uilblPaymentStatusAmountPaid.Font = lblPaymentStatusAmountPaid.Font;
            uilblPaymentStatusAmountPaid.TextAlignment = lblPaymentStatusAmountPaid.TextAlignment;
            uiviewPaymentAmountPaid.Add(uilblPaymentStatusAmountPaid);

            return uiviewPaymentAmountPaid;
        }
    }
}
