// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Foundation;
using JKMPCL.Model;
using JKMPCL.Services;
using UIKit;

namespace JKMIOSApp
{
    /// <summary>
    /// Controller Name : MyDocumentViewController
    /// Author          : Hiren Patel
    /// Creation Date   : 16 JAN 2018
    /// Purpose         : To display my document page screen as app shell screen
    /// Revision        : 
    /// </summary>
    public partial class MyDocumentViewController : UIViewController
    {
        private readonly MyDocument myDocumentServices;
        List<DocumentModel> documentModelList;


        public MyDocumentViewController(IntPtr handle) : base(handle)
        {
            myDocumentServices = new MyDocument();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
            NavigationController.NavigationBarHidden = true;
        }

        public async override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitilizeIntarface();
            await BindDocumentList();
            tableRelaodAndSetData();
        }

        /// <summary>
        /// Method Name     : InitilizeIntarface
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To Initilizes the intarface.
        /// Revision        : 
        /// </summary>
        public void InitilizeIntarface()
        {
            // InitilizeIntarface
            btnAlert.TouchUpInside += BtnAlert_TouchUpInside;
            btnContactUs.TouchUpInside += BtnContactUs_TouchUpInside;
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

        /// <summary>
        /// Event Name      : BtnContactUs_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : To redirect contactus page
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnContactUs_TouchUpInside(object sender, EventArgs e)
        {
            
            PerformSegue("mydocumentToContactUs", this);
        }

        /// <summary>
        /// Event Name      : BtnAlert_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : To redirect notification
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnAlert_TouchUpInside(object sender, EventArgs e)
        {
            PerformSegue("mydocumnetToNotification", this);
        }

        // Table list 
        /// <summary>
        /// Method Name     : BindDocumentList
        /// Author          : Hiren Patel
        /// Creation Date   : 25 Dec 2017
        /// Purpose         : To bind estimates list to table view.
        /// Revision        : 
        /// </summary>
        private async Task BindDocumentList()
        {
            await GetDocumentList();
            tableRelaodAndSetData();
        }

        /// <summary>
        /// Method Name     : tableRelaodAndSetData
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : Tables the relaod and set data.
        /// Revision        : 
        /// </summary>
        private void tableRelaodAndSetData()
        {
            tableViewMyDocumentList.Source = new MyDocumentTableCellSource(documentModelList, this);
            tableViewMyDocumentList.ReloadData();
        }

        /// <summary>
        /// Method Name     : GetAlertsList
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : Get document list from service
        /// Revision        : 
        /// </summary>
        public async Task GetDocumentList()
        {
            APIResponse<List<DocumentModel>> serviceResponse = new APIResponse<List<DocumentModel>>() { STATUS = false};
            documentModelList = new List<DocumentModel>();
            string errorMessage = string.Empty;
            try
            {
                LoadingOverlay loadingOverlay = UIHelper.ShowLoadingScreen(View);
                serviceResponse = await myDocumentServices.GetDocumentList(UtilityPCL.LoginCustomerData.CustomerId);
                loadingOverlay.Hide();
                if (serviceResponse.STATUS)
                {
                    if (serviceResponse.DATA != null)
                    {
                        documentModelList = serviceResponse.DATA;
                    }
                }
                else
                {
                    errorMessage = serviceResponse.Message;
                }
            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    UIHelper.ShowMessage(errorMessage);
                }
            }

        }
    }
}
