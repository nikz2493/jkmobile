// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections;
using System.Linq;
using CoreGraphics;
using Foundation;
using JKMPCL.Common;
using JKMPCL.Model;
using JKMPCL.Services;
using JKMPCL.Services.Estimate;
using UIKit;
using static JKMPCL.Services.UtilityPCL;
using JKMPCL.Services.Payment;
using System.Threading.Tasks;
using System.Collections.Generic;

namespace JKMIOSApp
{
    public partial class DepositePaymentViewController : UIViewController
    {
        private EstimateModel estimateModel;
        private readonly EstimateValidateServices estimateValidateServices;
        private readonly Payment payment;
        private bool isFormatCardNumber = true;

        public DepositePaymentViewController(IntPtr handle) : base(handle)
        {
            estimateValidateServices = new EstimateValidateServices();
            payment = new Payment();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitilizeIntarface();
            UIHelper.DismissKeyboardOnBackgroundTap(this);
            UIHelper.DismissKeyboardOnUITextField(txtCVV);
            UIHelper.DismissKeyboardOnUITextField(txtCardNumber);
            UIHelper.SetUiTextFieldAsNumberOnly(txtCVV, 3);

            UIHelper.DismissKeyboardOnUITextField(txtCardNumber);
            UIHelper.SetUiTextFieldAsCreditCardNumber(txtCardNumber, 19);
            UIHelper.SetUiTextFieldAsAlphabetOnly(txtNameOfCardholder);

            PopulateData();
            btnBack.TouchUpInside += BtnBack_TouchUpInside;
            btnSubmitPayment.TouchUpInside += BtnSubmitPayment_TouchUpInside;
            btnAreYouPaying.TouchUpInside += BtnAreYouPaying_TouchUpInside;

            btnAreYouPaying.Tag = 0;

            txtCardNumber.Text = string.Empty;
            txtCVV.Text = string.Empty;
            txtExpiredDate.Text = string.Empty;
            txtNameOfCardholder.Text = string.Empty;

            txtCardNumber.EditingChanged += txtCardNumber_EditingChanged;
            SetTapEventToExpiryTextBox();

            btnOK.TouchUpInside += BtnOK_TouchUpInside;
            btnCancel.TouchUpInside += BtnCancel_TouchUpInside;

            scrollViewDatePicker.Hidden = true;
            uiDatePicker.MinimumDate = Extensions.DateTimeToNSDate(DateTime.Today);
            uiDatePicker.MaximumDate = Extensions.DateTimeToNSDate(DateTime.Today.AddYears(40));
        }

        private void txtCardNumber_EditingChanged(object sender, EventArgs e)
        {
            imgCardType.Image = UIImage.FromFile(UIHelper.GetPaymentCardImage(txtCardNumber.Text));
            SetCardFormat();
            isFormatCardNumber = true;
        }

        /// <summary>
        /// Method Name     : SetCardFormat
        /// Author          : Hiren Patel
        /// Creation Date   : 28 Feb 2018
        /// Purpose         : add "-" after each 4 digit in credit card number
        /// Revision        : 
        /// </summary>
        public void SetCardFormat()
        {
            try
            {
                if (txtCardNumber.Text.Length < 19 && isFormatCardNumber)
                {
                    string cardNumber = txtCardNumber.Text.Replace("-", "").Trim();
                    string finalCardNumber = string.Empty;

                    for (int i = 0; i < cardNumber.Length; i++)
                    {
                        if (i % 4 == 0 && i > 0)
                        {
                            finalCardNumber += "-";
                            finalCardNumber += cardNumber[i].ToString();
                            isFormatCardNumber = false;
                        }
                        else
                        {
                            finalCardNumber += cardNumber[i].ToString();
                        }
                    }

                    //assign value to txtCardNumber only in case of isFormatCardNumber is false other wise it will looped infinite and application will crash
                    if (!isFormatCardNumber)
                    {
                        txtCardNumber.Text += "-";
                        int position = txtCardNumber.Text.Length;
                        //txtCardNumber.
                        txtCardNumber.Text = finalCardNumber;
                    }
                }
            }
            catch
            {
                //To be implemented later
            }
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }
        /// <summary>
        /// Method Name     : InitilizeIntarface
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To Initilizes the intarface.
        /// Revision        : 
        /// </summary>
        public void InitilizeIntarface()
        {
            UIHelper.DismissKeyboardOnBackgroundTap(this);
            UIHelper.SetDefaultWizardScrollViewBorderProperty(scrollViewDepositAmount);
            UIHelper.SetDefaultWizardScrollViewBorderProperty(scrollViewPaymentDetails);
        }

        /// <summary>
        /// Event Name      : BtnBack_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Dec 2017
        /// Purpose         : To redirec to back screen acknowledgement.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnBack_TouchUpInside(object sender, EventArgs e)
        {
            PerformSegue("depositToAcknowledgement", this);
        }

        /// <summary>
        /// Event Name      : BtnAreYouPaying_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Dec 2017
        /// Purpose         : To accept confirmation for paying or not deposit amount.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnAreYouPaying_TouchUpInside(object sender, EventArgs e)
        {
            btnAreYouPaying.Tag = btnAreYouPaying.Tag == 1 ? 0 : 1;
            btnAreYouPaying.SetImage(UIImage.FromFile(btnAreYouPaying.Tag == 1 ? AppConstant.WIZARD_IAGREE_IMAGE_URL : AppConstant.WIZARD_DISAGREE_IMAGE_URL), UIControlState.Normal);

            bool isCheckMode = btnAreYouPaying.Tag == 1;
            scrollViewPaymentDetails.UserInteractionEnabled = !isCheckMode;
            txtCVV.UserInteractionEnabled = !isCheckMode;
            txtCardNumber.UserInteractionEnabled = !isCheckMode;
            txtExpiredDate.UserInteractionEnabled = !isCheckMode;
            txtNameOfCardholder.UserInteractionEnabled = !isCheckMode;

        }

        /// <summary>
        /// Event Name      : BtnSubmitPayment_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 23 Dec 2017
        /// Purpose         : To complete payment process.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private async void BtnSubmitPayment_TouchUpInside(object sender, EventArgs e)
        {
            if (btnAreYouPaying.Tag == 1)
            {
                estimateModel.IsDepositPaidByCheck = true;
                PerformSegue("depositToMoveConfirmed", this);
            }
            else
            {
                estimateModel.IsDepositPaidByCheck = false;

                PaymentGatewayModel paymentGatewayModel = new PaymentGatewayModel();
                BindCardHolderNameToPaymentModel(paymentGatewayModel);
                BindCardNumberToPaymentModel(paymentGatewayModel);
                BindCVVToPaymentModel(paymentGatewayModel);
                BindExpiryDateToPaymentModel(paymentGatewayModel);
                BindDepositToPaymentModel(paymentGatewayModel);
                paymentGatewayModel.CustomerID = LoginCustomerData.CustomerId;
                paymentGatewayModel.EmailID = LoginCustomerData.EmailId;

                string message = estimateValidateServices.ValidatePaymentModel(paymentGatewayModel);
                if (string.IsNullOrEmpty(message))
                {
                   await callPaymentService(paymentGatewayModel);
                  
                }
                else
                {
                    UIHelper.ShowMessage(message);
                }

            }

        }

        /// <summary>
        /// Method Name     : BindCardHolderNameToPaymentModel
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Binds the card holder name to payment model.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private void BindCardHolderNameToPaymentModel(PaymentGatewayModel paymentGatewayModel)
        {
            if (!string.IsNullOrEmpty(txtNameOfCardholder.Text))
            {
                if (txtNameOfCardholder.Text.Split(' ').Length > 1)
                {
                    paymentGatewayModel.FirstName = txtNameOfCardholder.Text.Split(' ')[0];
                    paymentGatewayModel.LastName = txtNameOfCardholder.Text.Split(' ')[1];
                }
                else
                {
                    paymentGatewayModel.FirstName = txtNameOfCardholder.Text.Split(' ')[0];
                }
            }
        }

        /// <summary>
        /// Method Name     : BindCardNumberToPaymentModel
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Binds the card number to payment model.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private void BindCardNumberToPaymentModel(PaymentGatewayModel paymentGatewayModel)
        {
            if (!string.IsNullOrEmpty(txtCardNumber.Text))
            {
                paymentGatewayModel.CreditCardNumber = txtCardNumber.Text.Replace(" ", "").Replace("-", "");
            }
        }

        /// <summary>
        /// Method Name     : BindCVVToPaymentModel
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Binds the CVVT o payment model.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private void BindCVVToPaymentModel(PaymentGatewayModel paymentGatewayModel)
        {
            if (!string.IsNullOrEmpty(txtCVV.Text))
            {
                decimal number;
                if (!Decimal.TryParse(txtCVV.Text, out number))
                {
                    paymentGatewayModel.CVVNo = -1;
                }
                else
                {
                    paymentGatewayModel.CVVNo = Convert.ToInt32(txtCVV.Text);
                }
            }
        }

        /// <summary>
        /// Method Name     : BindExpiryDateToPaymentModel
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Binds the expiry date to payment model.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private void BindExpiryDateToPaymentModel(PaymentGatewayModel paymentGatewayModel)
        {
            if (!string.IsNullOrEmpty(txtExpiredDate.Text))
            {
                paymentGatewayModel.CardExpiryDate = txtExpiredDate.Text.Replace("/", "");
            }
        }

        /// <summary>
        /// Method Name     : BindDepositToPaymentModel
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Binds the deposit to payment model.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private void BindDepositToPaymentModel(PaymentGatewayModel paymentGatewayModel)
        {
            if (!IsNullOrEmptyOrWhiteSpace(estimateModel.Deposit))
            {
                paymentGatewayModel.TransactionAmout = Convert.ToDouble(RemoveCurrencyFormat(estimateModel.Deposit));
            }
        }

        /// <summary>
        /// Method Name     : callPaymentService
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Calls the payment service.
        /// Revision        : 
        /// </summary>
        /// <param name="paymentGatewayModel">Payment gateway model.</param>
        private async Task callPaymentService(PaymentGatewayModel paymentGatewayModel)
        {
            APIResponse<PaymentTransactonModel> serviceResponse = new APIResponse<PaymentTransactonModel>() { STATUS = false };
            string errorMessage = string.Empty;
            try
            {
                LoadingOverlay loadingOverlay = UIHelper.ShowLoadingScreen(View);
                serviceResponse = await payment.ProcessPaymentTransaction(paymentGatewayModel);
                loadingOverlay.Hide();
                if (serviceResponse.STATUS)
                {
                    if (serviceResponse.DATA != null)
                    {
                        estimateModel.TransactionId = serviceResponse.DATA.TransactionID;
                        estimateModel.PaymentStatus = true;
                        await CallPostPaymentTransaction(serviceResponse.DATA, estimateModel);
                        PerformSegue("depositToMoveConfirmed", this);
                    }
                }
                else
                {
                    errorMessage = serviceResponse.Message;
                    if (serviceResponse.DATA != null)
                    {
                        estimateModel.TransactionId = serviceResponse.DATA.TransactionID;
                        estimateModel.PaymentStatus = false;
                    }
                }


            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    await UIHelper.ShowMessageWithOKConfirm(string.Empty, errorMessage, AppConstant.ALERT_TRY_AGAIN_BUTTON_TEXT);
                }
            }

        }

        /// <summary>
        /// Method Name     : CallPostPaymentTransaction
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Feb 2018
        /// Purpose         : Calls the post payment transaction.
        /// Revision        : 
        /// </summary>
        /// <returns>The post payment transaction.</returns>
        /// <param name="paymentTransactonModel">Payment transacton model.</param>
        /// <param name="estimateModel">Estimate model.</param>
        private async Task CallPostPaymentTransaction(PaymentTransactonModel paymentTransactonModel, EstimateModel estimateModel)
        {
            APIResponse<PaymentModel> serviceResponse = new APIResponse<PaymentModel>() { STATUS = false };
            string errorMessage = string.Empty;
            try
            {
                List<PaymentModel> paymentModelList = new List<PaymentModel>();
                PaymentModel paymentModel = new PaymentModel();
                paymentModel.MoveID = estimateModel.MoveId;
                paymentModel.TransactionNumber = paymentTransactonModel.TransactionID;
                if (!IsNullOrEmptyOrWhiteSpace(estimateModel.Deposit))
                {
                    paymentModel.TransactionAmount = RemoveCurrencyFormat(estimateModel.Deposit);
                }

                paymentModel.TransactionDate = UIHelper.DisplayDateFormatForEstimate(DateTime.Now);
                paymentModel.CustomerID = LoginCustomerData.CustomerId;

                paymentModelList.Add(paymentModel);
                serviceResponse = await payment.PostPaymentTransaction(paymentModelList);
            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    await UIHelper.ShowMessageWithOKConfirm(string.Empty, errorMessage, AppConstant.ALERT_OK_BUTTON_TEXT);
                }
            }
        }

        /// <summary>
        /// Method Name     : SetTapEventToExpiryTextBox
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the tap event to expiry date text box.
        /// Revision        : 
        /// </summary>
        private void SetTapEventToExpiryTextBox()
        {
            UITapGestureRecognizer txtExpiredDateTap = new UITapGestureRecognizer(() =>
            {

                scrollViewDatePicker.Hidden = false;
                scrollViewDatePicker.Frame = scrollViewPaymentDetails.Frame;

            });
            txtExpiredDate.AddGestureRecognizer(txtExpiredDateTap);

        }

        /// <summary>
        /// Event Name      : BtnOK_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirec to back screen
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnOK_TouchUpInside(object sender, EventArgs e)
        {
            NSDate selectedDate = uiDatePicker.Date;
            scrollViewDatePicker.Hidden = true;
            string date = UIHelper.DisplayDateFormatForCardExpiryDate(selectedDate.NSDateToDateTime());
            txtExpiredDate.Text = date;
        }

        /// <summary>
        /// Event Name      : BtnCancel_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : hide date picker
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnCancel_TouchUpInside(object sender, EventArgs e)
        {
            scrollViewDatePicker.Hidden = true;
        }



        /// <summary>
        /// Method Name     : PopulateData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateData()
        {
            estimateModel = DTOConsumer.GetSelectedEstimate();
            if (estimateModel != null)
            {
                if (!estimateModel.IsDepositPaid)
                {
                    estimateModel.Deposit = CurrencyFormat(estimateModel.DepositValue);
                }
                lblDepositAmountValue.Text = estimateModel.Deposit;
            }
            UIHelper.CreateWizardHeader(9, viewStepsProgressBar, estimateModel);
        }


    }
}



