// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using CoreGraphics;
using Foundation;
using JKMIOSApp.Common;
using JKMPCL.Common;
using JKMPCL.Model;
using JKMPCL.Services;
using JKMPCL.Services.Estimate;
using UIKit;

namespace JKMIOSApp
{
    /// <summary>
    /// Controller Name : AcknowledgementViewController
    /// Author          : Hiren Patel
    /// Creation Date   : 29 Dec 2017
    /// Purpose         : To display acknowledgement page screen as estimate wizard step
    /// Revision        : 
    /// </summary>
    public partial class AcknowledgementViewController : UIViewController
    {
        private EstimateModel estimateModel;
        private CoveragePickerDataModel coveragePickerDataModel;
        private nint currentTextBoxTag;
        private readonly EstimateValidateServices estimateValidateServices;
        bool isServiceDateEdited = false;
        bool isAddressesEdited = false;
        bool isWhatMatterMostEdited = false;
        bool isValuationEdited = false;
        public AcknowledgementViewController(IntPtr handle) : base(handle)
        {
            estimateValidateServices = new EstimateValidateServices();
        }

        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitilizeIntarface();
            CreateHeader();
            PopulateData();
            scrollViewDatePicker.Hidden = true;
            uiScrollViewPickerContainer.Hidden = true;

            // ServiceDates
            btnServiceDateEdit.TouchUpInside += BtnServiceDateEdit_TouchUpInside;
            btnOkDatePicker.TouchUpInside += BtnOkDatePicker_TouchUpInside;
            btnCancelDatePicker.TouchUpInside += BtnCancelDatePicker_TouchUpInside;

            //Address
            btnAddressesEdit.TouchUpInside += BtnAddressesEdit_TouchUpInside;

            // Valuation
            BindCoverageValue();
            btnValuationEdit.TouchUpInside += BtnValuationEdit_TouchUpInside;
            btnOKPickerValuation.TouchUpInside += BtnOKPickerValuation_TouchUpInside;
            btnCancelPickerValuation.TouchUpInside += BtnCancelPickerValuation_TouchUpInside;

            UIHelper.SetDefaultWizardScrollViewBorderProperty(uiScrollViewPickerContainer);

            // What Matteres Most
            btnWhatMatteresMostEdit.TouchUpInside += BtnWhatMatteresMostEdit_TouchUpInside;

            // I agree
            btnIagree.TouchUpInside += BtnIagree_TouchUpInside;
            btnIagree.Tag = 0;

            // Just for temporary used
            scrollViewMainContainer.Hidden = false;
            scrollViewDate.Hidden = true;
            scrollviewAddresses.Hidden = true;
            scrollviewWhatMattersMost.Hidden = true;
            scrollviewValuation.Hidden = true;
            MiniMizeScrollView(scrollViewDate);
            MiniMizeScrollView(scrollviewAddresses);
            MiniMizeScrollView(scrollviewValuation);
            MiniMizeScrollView(scrollviewWhatMattersMost);

            uiDatePicker.MinimumDate = Extensions.DateTimeToNSDate(DateTime.Today);

            SetViewPosition();




        }
        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

        /// <summary>
        /// Method Name     : InitilizeIntarface
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To Initilizes the intarface.
        /// Revision        : 
        /// </summary>
        public void InitilizeIntarface()
        {
            // InitilizeIntarface
            UIHelper.DismissKeyboardOnBackgroundTap(this);
            ResetTextBoxControl();
            SetScrollViewProperty();
            SetScrollViewHeight(scrollViewStepsContainer);

            btnBack.TouchUpInside += BtnBack_TouchUpInside;
            btnContinue.TouchUpInside += BtnContinue_TouchUpInside;
            btnViewEstimate.TouchUpInside += BtnViewEstimate_TouchUpInside;

            SetTapEventToCoverageLabel();

            scrollViewMainContainer.Hidden = false;

            btnServiceDateEdit.Tag = 0;
            btnAddressesEdit.Tag = 0;
            btnAddressesEdit.Tag = 0;

            scrollViewDate.Hidden = false;

            SetControlPropertyForDetectChanges();
        }

        public void SetControlPropertyForDetectChanges()
        {
            txtOriginAddress.Tag = 1;
            txtDestinationAddress.Tag = 2;
            txtWhatMattersMost.Tag = 3;
            txtDeclaredValue.Tag = 4;

            txtOriginAddress.Changed += UITextViewChange_EditingChanged;
            txtDestinationAddress.Changed += UITextViewChange_EditingChanged;
            txtWhatMattersMost.Changed += UITextViewChange_EditingChanged;
            txtDeclaredValue.EditingChanged += TxtDeclaredValue_EditingChanged;
        }

        private void UITextViewChange_EditingChanged(object sender, EventArgs e)
        {
            UITextView uiTextView = sender as UITextView;
            if (uiTextView.Tag == 1)
            {
                isAddressesEdited = true;
            }
            else if (uiTextView.Tag == 2)
            {
                isAddressesEdited = true;
            }
            else if (uiTextView.Tag == 3)
            {
                isWhatMatterMostEdited = true;
            }

        }

        private void TxtDeclaredValue_EditingChanged(object sender, EventArgs e)
        {
            isValuationEdited = true;
        }

        public void SetScrollViewProperty()
        {
            UIHelper.SetDefaultEstimateButtonProperty(btnViewEstimate);

            UIHelper.SetDefaultWizardScrollViewBorderProperty(scrollViewMainContainer);
            UIHelper.SetDefaultWizardScrollViewBorderProperty(scrollViewStepsContainer);

            UIHelper.SetDefaultScrollViewBorderProperty(scrollViewDate);
            UIHelper.SetDefaultScrollViewBorderProperty(scrollviewAddresses);
            UIHelper.SetDefaultScrollViewBorderProperty(scrollviewValuation);
            UIHelper.SetDefaultScrollViewBorderProperty(scrollviewWhatMattersMost);

            UIHelper.SetDefaultWizardScrollViewBorderProperty(scrollViewIAgree);

            scrollViewStepsContainer.Layer.MasksToBounds = true;
        }


        /// <summary>
        /// Method Name     : ResetTextBoxControl
        /// Author          : Hiren Patel
        /// Creation Date   : 18 Jan 2018
        /// Purpose         : Resets the text box control. 
        /// Revision        : 
        /// </summary>
        private void ResetTextBoxControl()
        {
            txtLoadDate.Text = string.Empty;
            txtMoveDate.Text = string.Empty;
            txtPackDate.Text = string.Empty;

            txtCost.UserInteractionEnabled = false;
            txtCost.Text = string.Empty;
            txtCoverageValue.Text = string.Empty;
            txtDeclaredValue.Text = string.Empty;

            txtOriginAddress.Text = string.Empty;
            txtDestinationAddress.Text = string.Empty;

            txtWhatMattersMost.Text = string.Empty;
        }

        /// <summary>
        /// Method Name     : SetScrollViewHeigh
        /// Author          : Hiren Patel
        /// Creation Date   : 18 Jan 2018
        /// Purpose         : To set scroll view height 
        /// Revision        : 
        /// </summary>
        public void SetScrollViewHeight(UIScrollView uiScrollView)
        {
            int scrollviewIncremental = 1000;
            if (UIHelper.IsIPAD(View))
            {
                scrollviewIncremental = 150;
            }
            else if (UIHelper.ScreenSize(View) == AppConstant.IPHONE_5_WIDTH_AND_HEIGHT)
            {
                scrollviewIncremental = 570;
            }
            else if (UIHelper.ScreenSize(View) == AppConstant.IPHONE_6_WIDTH_AND_HEIGHT)
            {
                scrollviewIncremental = 550;
            }
            else if (UIHelper.ScreenSize(View) == AppConstant.IPHONE_6_PLUS_WIDTH_AND_HEIGHT)
            {
                scrollviewIncremental = 420;
            }
            scrollviewIncremental = 0;
            uiScrollView.ContentSize = new CGSize(uiScrollView.Frame.Size.Width, 1000 + scrollviewIncremental);
        }

        // For Collapse screen
        /// <summary>
        /// Method Name     : GetListOfStepsView
        /// Author          : Hiren Patel
        /// Creation Date   : 18 Jan 2018
        /// Purpose         : Gets the list of steps view. 
        /// Revision        : 
        /// </summary>
        /// <returns>The list of steps view.</returns>
        private List<AcknowledgementViewModel> GetListOfStepsView()
        {
            List<AcknowledgementViewModel> viewModelList = new List<AcknowledgementViewModel>();
            viewModelList.Add(CreateAcknowledgementViewModel(1, null, viewServiceDates, null, null));
            viewModelList.Add(CreateAcknowledgementViewModel(2, 1, scrollViewDate, viewServiceDates, 152));
            viewModelList.Add(CreateAcknowledgementViewModel(3, 2, viewServices, scrollViewDate, null));
            viewModelList.Add(CreateAcknowledgementViewModel(4, 3, viewVitalInformation, viewServices, null));
            viewModelList.Add(CreateAcknowledgementViewModel(5, 4, viewAddresses, viewVitalInformation, null));
            viewModelList.Add(CreateAcknowledgementViewModel(6, 5, scrollviewAddresses, viewAddresses, 160));
            viewModelList.Add(CreateAcknowledgementViewModel(7, 6, viewValuation, scrollviewAddresses, null));
            viewModelList.Add(CreateAcknowledgementViewModel(8, 7, scrollviewValuation, viewValuation, 200));
            viewModelList.Add(CreateAcknowledgementViewModel(9, 8, viewWhatMaattersMost, scrollviewValuation, null));
            viewModelList.Add(CreateAcknowledgementViewModel(10, 9, scrollviewWhatMattersMost, viewWhatMaattersMost, 150));

            return viewModelList;
        }

        /// <summary>
        /// Method Name     : CreateAcknowledgementViewModel
        /// Author          : Hiren Patel
        /// Creation Date   : 19 Feb 2018
        /// Purpose         : Creates the acknowledgement view model.
        /// Revision        : 
        /// </summary>
        /// <returns>The acknowledgement view model.</returns>
        /// <param name="index">Index.</param>
        /// <param name="parentIndex">Parent index.</param>
        /// <param name="uiView">User interface view.</param>
        /// <param name="parentUIView">Parent UIV iew.</param>
        /// <param name="height">Height.</param>
        private AcknowledgementViewModel CreateAcknowledgementViewModel(int index, int? parentIndex, UIView uiView, UIView parentUIView, nfloat? height)
        {
            uiView.Tag = index;
            return new AcknowledgementViewModel() { Index = index, ParentIndex = parentIndex, UIVIew = uiView, ParentUIView = parentUIView, Height = height };
        }

        /// <summary>
        /// Method Name     : SetViewPosition
        /// Author          : Hiren Patel
        /// Creation Date   : 19 Feb 2018
        /// Purpose         : Sets the view position.
        /// Revision        : 
        /// </summary>
        private void SetViewPosition()
        {
            List<AcknowledgementViewModel> viewModelList = GetListOfStepsView();
            foreach (AcknowledgementViewModel viewModel in viewModelList)
            {
                if (viewModel.ParentUIView != null)
                {
                    nfloat Y = (viewModel.ParentUIView.Frame.Y + viewModel.ParentUIView.Frame.Height);
                    nfloat X = viewModel.UIVIew.Frame.X;

                    nfloat height = viewModel.UIVIew.Hidden ? 0 : (viewModel.Height.HasValue ? viewModel.Height.Value : viewModel.UIVIew.Frame.Height);
                    viewModel.UIVIew.Frame = new CGRect(X, Y, viewModel.UIVIew.Frame.Width, height);
                }

            }
            scrollViewDatePicker.Hidden = true;
            uiScrollViewPickerContainer.Hidden = true;
        }

        /// <summary>
        /// Method Name     : MiniMizeScrollView
        /// Author          : Hiren Patel
        /// Creation Date   : 19 Feb 2018
        /// Purpose         : Minimize scroll view.
        /// Revision        : 
        /// </summary>
        /// <param name="uiView">User interface view.</param>
        private void MiniMizeScrollView(UIView uiView)
        {
            uiView.Frame = new CGRect(uiView.Frame.X, uiView.Frame.Y, uiView.Frame.Width, 0);
        }

        /// <summary>
        /// Event Name      : BtnBack_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirec to back screen as vital information screen.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnBack_TouchUpInside(object sender, EventArgs e)
        {
            PerformSegue("acknowledgementToVitalInformation", this);
        }

        /// <summary>
        /// Event Name      : BtnIagree_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To confirm data
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnIagree_TouchUpInside(object sender, EventArgs e)
        {
            btnIagree.Tag = btnIagree.Tag == 1 ? 0 : 1;

            btnIagree.SetImage(UIImage.FromFile(btnIagree.Tag == 1 ? AppConstant.WIZARD_IAGREE_IMAGE_URL : AppConstant.WIZARD_DISAGREE_IMAGE_URL), UIControlState.Normal);
        }

        /// <summary>
        /// Event Name      : BtnContinue_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : confirmed edited data and redirect to move confimned screen.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private async void BtnContinue_TouchUpInside(object sender, EventArgs e)
        {
            if ((isServiceDateEdited && scrollViewDate.Hidden == false) || (isAddressesEdited && scrollviewAddresses.Hidden == false) || (isValuationEdited && scrollviewValuation.Hidden == false) || (isWhatMatterMostEdited && scrollviewWhatMattersMost.Hidden == false))
            {
                int buttonIndex = await UIHelper.ShowMessageWithOKConfirm(string.Empty, AppConstant.ACKNOWLEDGEMENT_SAVE_DATA_CONFIRM_MESSAGE, AppConstant.CONIRM_YES_BUTTON_TEXT, AppConstant.CONIRM_NO_BUTTON_TEXT);

                if (buttonIndex == 0)
                {
                    string message = IsValidAllData();
                    if (!string.IsNullOrEmpty(message))
                    {
                        UIHelper.ShowMessage(message);
                        return;
                    }
                    else
                    {
                        SaveServiceDatesToDTO();
                        SaveAddressesToDTO();
                        SaveValuationDataToDTO();
                        SaveWhatMattersMostDataToDTO();
                    }
                }
            }

            if (btnIagree.Tag == 0)
            {
                UIHelper.ShowMessage(AppConstant.WIZARD_DISAGREE_MESSAGE);
            }
            else
            {
                if (DTOConsumer.dtoEstimateData != null)
                {
                    estimateModel = DTOConsumer.GetSelectedEstimate();
                    if (estimateModel != null)
                    {
                        if (estimateModel.IsDepositPaid)
                        {
                            PerformSegue("acknowledgementToMoveConfirm", this);

                        }
                        else
                        {
                            PerformSegue("acknowledgementToDeposit", this);
                        }
                    }
                }
            }
        }

        /// <summary>
        /// Method Name     : IsValidAllData
        /// Author          : Hiren Patel
        /// Creation Date   : 1 Mar 2018
        /// Purpose         : To validate all data before save
        /// Revision        : 
        /// </summary>
        /// <returns>validate message</returns>
        private string IsValidAllData()
        {
            string message = estimateValidateServices.ValidateServiceDates(txtPackDate.Text, txtLoadDate.Text, txtMoveDate.Text);

            if (String.IsNullOrEmpty(message))
            {
                message = estimateValidateServices.ValidateCustomerAddress(txtOriginAddress.Text, txtDestinationAddress.Text);
            }
            if (String.IsNullOrEmpty(message))
            {
                message = estimateValidateServices.ValidateWhatMattersMost(txtWhatMattersMost.Text);
            }
            if (String.IsNullOrEmpty(message))
            {
                message = estimateValidateServices.ValidateValuationData(txtDeclaredValue.Text, txtCoverageValue.Text, txtCost.Text);
            }
            return message;
        }


        /// <summary>
        /// Event Name      : BtnViewEstimate_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To view or download estimate pdf file
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnViewEstimate_TouchUpInside(object sender, EventArgs e)
        {
            UIHelper.CallingScreen = JKMEnum.UIViewControllerID.AcknowledgementView;
            UIHelper.RedirectToViewController(this, JKMEnum.UIViewControllerID.ViewEstimateReviewView);
        }

        /// <summary>
        /// Method Name     : PopulateData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateData()
        {
            scrollViewDate.Hidden = true;
            scrollviewAddresses.Hidden = true;
            scrollviewValuation.Hidden = true;
            scrollviewWhatMattersMost.Hidden = true;


            estimateModel = DTOConsumer.GetSelectedEstimate();
            if (estimateModel != null)
            {
                PopulateServicesDates(estimateModel);
                PopulateAddressesData(estimateModel);
                PopulateValuatiosData(estimateModel);
                PopulateWhatMattersMost(estimateModel);
            }

            UIHelper.CreateWizardHeader(8, viewHeader, estimateModel);
        }

        /// <summary>
        /// Method Name     : PopulateServicesDates
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateServicesDates(EstimateModel estimateModel)
        {
            txtPackDate.Text = estimateModel.PackStartDate;
            txtLoadDate.Text = estimateModel.LoadStartDate;
            txtMoveDate.Text = estimateModel.MoveStartDate;

            SetChangedUnChangedImage(imgServiceDate, estimateModel.IsServiceDate);
            ResetControlServiceDates();
        }

        /// <summary>
        /// Method Name     : PopulateAddressesData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateAddressesData(EstimateModel estimateModel)
        {
            txtOriginAddress.Text = estimateModel.CustomOriginAddress;
            txtDestinationAddress.Text = estimateModel.CustomDestinationAddress;

            SetChangedUnChangedImage(imgAddresses, estimateModel.IsAddressEdited);
        }

        /// <summary>
        /// Method Name     : PopulateValuatiosData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateValuatiosData(EstimateModel estimateModel)
        {
            txtCost.Text = UtilityPCL.RemoveCurrencyFormat(estimateModel.ExcessValuation);
            txtCoverageValue.Text = estimateModel.ValuationDeductible;
            txtDeclaredValue.Text = UtilityPCL.RemoveCurrencyFormat(estimateModel.ValuationCost);
            SetChangedUnChangedImage(imgValuation, estimateModel.IsValuationEdited);
        }

        /// <summary>
        /// Method Name     : PopulateWhatMattersMost
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateWhatMattersMost(EstimateModel estimateModel)
        {
            txtWhatMattersMost.Text = estimateModel.WhatMattersMost;
            SetChangedUnChangedImage(imgWhatMattersMost, estimateModel.IsWhatMatterMostEdited);
        }

        // Service Date Methodes

        /// <summary>
        /// Event Name     : btnChangeMyServicesDatesPressed
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To update and change entered services dates
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnServiceDateEdit_TouchUpInside(object sender, EventArgs e)
        {

            if (scrollViewDate.Hidden)
            {
                scrollViewDate.Hidden = false;
                SetChangedUnChangedEditButtonImage(btnServiceDateEdit, true);
            }
            else
            {
                string message = estimateValidateServices.ValidateServiceDates(txtPackDate.Text, txtLoadDate.Text, txtMoveDate.Text);
                if (string.IsNullOrEmpty(message))
                {
                    SaveServiceDatesToDTO();
                    scrollViewDate.Hidden = true;
                    SetChangedUnChangedEditButtonImage(btnServiceDateEdit, false);
                }
                else
                {
                    UIHelper.ShowMessage(message);
                }
            }

            SetViewPosition();
        }

        /// <summary>
        /// Method Name     : SaveDatesToDTO
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Save date to DTO 
        /// Revision        : 
        /// </summary>
        private void SaveServiceDatesToDTO()
        {
            if (DTOConsumer.dtoEstimateData != null && isServiceDateEdited)
            {
                estimateModel = DTOConsumer.GetSelectedEstimate();
                if (estimateModel != null)
                {
                    estimateModel.PackStartDate = txtPackDate.Text;
                    estimateModel.LoadStartDate = txtLoadDate.Text;
                    estimateModel.MoveStartDate = txtMoveDate.Text;
                    estimateModel.IsServiceDate = true;
                    PopulateServicesDates(estimateModel);
                }
            }
        }

        /// <summary>
        /// Method Name     : ResetControlEditMode
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2018
        /// Purpose         : Resets the control edit mode.
        /// Revision        : 
        /// </summary>
        private void ResetControlServiceDates()
        {

            txtPackDate.Tag = 1;
            txtLoadDate.Tag = 2;
            txtMoveDate.Tag = 3;
            SetEditableDateControl(true);
            SetTapEventToPackDateTextBox();
            SetTapEventToLoadDateTextBox();
            SetTapEventToMoveDateTextBox();
        }

        /// <summary>
        /// Method Name     : SetEditableDateControl
        /// Author          : Hiren Patel
        /// Creation Date   : 30 JAN 2018
        /// Purpose         : Sets the editable date control. 
        /// Revision        : 
        /// </summary>
        /// <param name="isEditable">If set to <c>true</c> is editable.</param>
        public void SetEditableDateControl(bool isEditable)
        {
            txtPackDate.UserInteractionEnabled = isEditable;
            txtLoadDate.UserInteractionEnabled = isEditable;
            txtMoveDate.UserInteractionEnabled = isEditable;
            UITextBorderStyle borderStyle = isEditable ? UITextBorderStyle.RoundedRect : UITextBorderStyle.None;

            txtPackDate.BorderStyle = borderStyle;
            txtLoadDate.BorderStyle = borderStyle;
            txtMoveDate.BorderStyle = borderStyle;

        }

        /// <summary>
        /// Method Name     : SetTapEventToPackDateTextBox
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the tap event to pack date text box.
        /// Revision        : 
        /// </summary>
        private void SetTapEventToPackDateTextBox()
        {
            UITapGestureRecognizer txtPackDateTap = new UITapGestureRecognizer(() =>
            {
                currentTextBoxTag = txtPackDate.Tag;
                scrollViewDatePicker.Hidden = false;
                scrollViewDatePicker.Frame = scrollViewDate.Frame;
                if (!string.IsNullOrEmpty(txtPackDate.Text))
                {
                    uiDatePicker.SetDate(Extensions.DateTimeToNSDate(Convert.ToDateTime(txtPackDate.Text)), true);
                }
            });
            txtPackDate.AddGestureRecognizer(txtPackDateTap);
        }

        /// <summary>
        /// Method Name     : SetTapEventToLoadDateTextBox
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the tap event to load date text box.
        /// Revision        : 
        /// </summary>
        private void SetTapEventToLoadDateTextBox()
        {
            UITapGestureRecognizer txtLoadDateTap = new UITapGestureRecognizer(() =>
            {
                currentTextBoxTag = txtLoadDate.Tag;
                scrollViewDatePicker.Hidden = false;
                scrollViewDatePicker.Frame = scrollViewDate.Frame;
                if (!string.IsNullOrEmpty(txtLoadDate.Text))
                {
                    uiDatePicker.SetDate(Extensions.DateTimeToNSDate(Convert.ToDateTime(txtLoadDate.Text)), true);
                }
            });
            txtLoadDate.AddGestureRecognizer(txtLoadDateTap);

        }

        /// <summary>
        /// Method Name     : SetTapEventToMoveDateTextBox
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the tap event to move date text box.
        /// Revision        : 
        /// </summary>
        private void SetTapEventToMoveDateTextBox()
        {
            UITapGestureRecognizer txtMoveDateTap = new UITapGestureRecognizer(() =>
            {
                currentTextBoxTag = txtMoveDate.Tag;
                scrollViewDatePicker.Hidden = false;
                scrollViewDatePicker.Frame = scrollViewDate.Frame;
                if (!string.IsNullOrEmpty(txtMoveDate.Text))
                {
                    uiDatePicker.SetDate(Extensions.DateTimeToNSDate(Convert.ToDateTime(txtMoveDate.Text)), true);
                }
            });

            txtMoveDate.AddGestureRecognizer(txtMoveDateTap);
        }

        /// <summary>
        /// Event Name      : BtnOK_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirec to back screen
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnOkDatePicker_TouchUpInside(object sender, EventArgs e)
        {
            NSDate selectedDate = uiDatePicker.Date;
            scrollViewDatePicker.Hidden = true;
            string date = UIHelper.DisplayDateFormatForEstimate(selectedDate.NSDateToDateTime());
            switch (currentTextBoxTag)
            {
                case 1:
                    txtPackDate.Text = date;
                    break;
                case 2:
                    txtLoadDate.Text = date;
                    break;
                case 3:
                    txtMoveDate.Text = date;
                    break;
            }

            isServiceDateEdited = true;
        }

        /// <summary>
        /// Event Name      : BtnCancel_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirec to back screen
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnCancelDatePicker_TouchUpInside(object sender, EventArgs e)
        {
            scrollViewDatePicker.Hidden = true;
        }

        /// <summary>
        /// Event Name      : BtnAddressesEdit_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To update and change addresses
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnAddressesEdit_TouchUpInside(object sender, EventArgs e)
        {
            if (scrollviewAddresses.Hidden)
            {
                scrollviewAddresses.Hidden = false;
                SetChangedUnChangedEditButtonImage(btnAddressesEdit, true);
            }
            else
            {
                scrollviewAddresses.Hidden = false;
                string message = estimateValidateServices.ValidateCustomerAddress(txtOriginAddress.Text, txtDestinationAddress.Text);
                if (string.IsNullOrEmpty(message))
                {
                    SaveAddressesToDTO();
                    scrollviewAddresses.Hidden = true;
                    SetChangedUnChangedEditButtonImage(btnAddressesEdit, false);
                }
                else
                {
                    UIHelper.ShowMessage(message);
                }
            }
            SetViewPosition();
        }

        /// <summary>
        /// Event Name      : BtnAddressesEdit_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To update and change addresses
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnValuationEdit_TouchUpInside(object sender, EventArgs e)
        {

            if (scrollviewValuation.Hidden)
            {
                scrollviewValuation.Hidden = false;
                SetChangedUnChangedEditButtonImage(btnValuationEdit, true);
                SetTapEventToCoverageLabel();
            }
            else
            {
                scrollviewValuation.Hidden = false;
                string message = estimateValidateServices.ValidateValuationData(txtDeclaredValue.Text, txtCoverageValue.Text, txtCost.Text);
                if (string.IsNullOrEmpty(message))
                {
                    SaveValuationDataToDTO();
                    scrollviewValuation.Hidden = true;
                    SetChangedUnChangedEditButtonImage(btnValuationEdit, false);
                    uiScrollViewPickerContainer.Hidden = true;
                }
                else
                {
                    UIHelper.ShowMessage(message);
                }
            }
            SetViewPosition();
        }

        /// <summary>
        /// Method Name     : SaveDatesToDTO
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Save date to DTO 
        /// Revision        : 
        /// </summary>
        private void SaveAddressesToDTO()
        {
            if (DTOConsumer.dtoEstimateData != null && isAddressesEdited)
            {
                estimateModel = DTOConsumer.GetSelectedEstimate();
                if (estimateModel != null)
                {
                    estimateModel.CustomOriginAddress = txtOriginAddress.Text;
                    estimateModel.CustomDestinationAddress = txtDestinationAddress.Text;
                    estimateModel.IsAddressEdited = true;
                    PopulateAddressesData(estimateModel);
                }
            }
        }

        /// <summary>
        /// Method Name     : SaveValuationDataToDTO
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Save date to DTO 
        /// Revision        : 
        /// </summary>
        private void SaveValuationDataToDTO()
        {
            if (DTOConsumer.dtoEstimateData != null && isValuationEdited)
            {
                estimateModel = DTOConsumer.GetSelectedEstimate();
                if (estimateModel != null)
                {
                    estimateModel.ExcessValuation = txtDeclaredValue.Text;
                    estimateModel.ValuationDeductible = txtCoverageValue.Text;
                    estimateModel.ValuationCost = txtCost.Text;
                    estimateModel.IsValuationEdited = true;
                    PopulateValuatiosData(estimateModel);
                }
            }
        }

        public void BindCoverageValue()
        {
            // create our simple picker model
            coveragePickerDataModel = new CoveragePickerDataModel();

            foreach (string item in UtilityPCL.ValuationDeductibleBindingList())
            {
                coveragePickerDataModel.Items.Add(item);
            }
            // set it on our picker class
            uiPickerViewCoverage.Model = coveragePickerDataModel;
        }

        /// <summary>
        /// Event Name      : BtnOK_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To set coverage picker value to coverage label
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnOKPickerValuation_TouchUpInside(object sender, EventArgs e)
        {
            txtCoverageValue.Text = coveragePickerDataModel.SelectedItem;
            uiScrollViewPickerContainer.Hidden = true;
            isValuationEdited = true;
        }

        /// <summary>
        /// Event Name      : BtnCancel_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To set coverage picker value to coverage label
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnCancelPickerValuation_TouchUpInside(object sender, EventArgs e)
        {
            uiScrollViewPickerContainer.Hidden = true;
        }

        /// <summary>
        /// Method Name     : SetTapEventToMoveDateTextBox
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the tap event to move date text box.
        /// Revision        : 
        /// </summary>
        private void SetTapEventToCoverageLabel()
        {
            txtCoverageValue.UserInteractionEnabled = true;
            UITapGestureRecognizer txtCoverageValueTap = new UITapGestureRecognizer(() =>
            {
                uiScrollViewPickerContainer.Frame = scrollviewValuation.Frame;
                uiScrollViewPickerContainer.Hidden = false;

                if (!string.IsNullOrEmpty(txtCoverageValue.Text))
                {
                    int counter = 0;
                    int selectedIndex = 0;
                    foreach (string item in coveragePickerDataModel.Items)
                    {
                        counter++;
                        if (!string.IsNullOrEmpty(txtCoverageValue.Text) && txtCoverageValue.Text == item)
                        {
                            selectedIndex = counter;
                        }
                    }
                    // set our initial selection on the label
                    coveragePickerDataModel.SetSelectedIndex(selectedIndex);
                }
            });
            txtCoverageValue.AddGestureRecognizer(txtCoverageValueTap);
        }

        /// <summary>
        /// Event Name      : BtnAddressesEdit_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To update and change addresses
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnWhatMatteresMostEdit_TouchUpInside(object sender, EventArgs e)
        {
            if (scrollviewWhatMattersMost.Hidden)
            {
                scrollviewWhatMattersMost.Hidden = false;
                SetChangedUnChangedEditButtonImage(btnWhatMatteresMostEdit, true);
            }
            else
            {
                scrollviewWhatMattersMost.Hidden = false;
                string message = estimateValidateServices.ValidateWhatMattersMost(txtWhatMattersMost.Text);
                if (string.IsNullOrEmpty(message))
                {
                    SaveWhatMattersMostDataToDTO();
                    scrollviewWhatMattersMost.Hidden = true;
                    SetChangedUnChangedEditButtonImage(btnWhatMatteresMostEdit, false);
                }
                else
                {
                    UIHelper.ShowMessage(message);
                }
            }
            SetViewPosition();
        }

        /// <summary>
        /// Method Name     : SaveValuationDataToDTO
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Save date to DTO 
        /// Revision        : 
        /// </summary>
        private void SaveWhatMattersMostDataToDTO()
        {
            if (DTOConsumer.dtoEstimateData != null && isWhatMatterMostEdited)
            {
                estimateModel = DTOConsumer.GetSelectedEstimate();
                if (estimateModel != null)
                {
                    estimateModel.WhatMattersMost = txtWhatMattersMost.Text;
                    estimateModel.IsWhatMatterMostEdited = true;
                    PopulateWhatMattersMost(estimateModel);
                }
            }
        }

        /// <summary>
        /// Method Name     : SetChangedUnChangedImage
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the changed unchanged image.
        /// Revision        : 
        /// Sets the changed un changed image.
        /// </summary>
        /// <param name="uiImageView">User interface image view.</param>
        /// <param name="isEditMode">If set to <c>true</c> is edit mode.</param>
        public void SetChangedUnChangedImage(UIImageView uiImageView, bool isEditMode)
        {
            uiImageView.Image = UIImage.FromFile(isEditMode ? AppConstant.WIZARD_CHECKED_YELLOW_IMAGE_URL : AppConstant.WIZARD_CHECKED_IMAGE_URL);
        }

        /// <summary>
        /// Method Name     : SetChangedUnChangedImage
        /// Author          : Hiren Patel
        /// Creation Date   : 31 Jan 2017
        /// Purpose         : Sets the changed unchanged edit button image.
        /// Revision        : 
        /// Sets the changed un changed image.
        /// </summary>
        /// <param name="uiButton">User interface button.</param>
        /// <param name="IsEditable">If set to <c>true</c> is editable.</param>
        public void SetChangedUnChangedEditButtonImage(UIButton uiButton, bool IsEditable)
        {
            uiButton.SetImage(UIImage.FromFile(IsEditable ? AppConstant.WIZARD_EDIT_SELECTED_IMAGE_URL : AppConstant.WIZARD_EDIT_IMAGE_URL), UIControlState.Normal);
        }

        private void CreateHeader()
        {
            estimateModel = DTOConsumer.GetSelectedEstimate();
            UIHelper.CreateWizardHeader(8, viewHeader, estimateModel);
        }
    }
}
