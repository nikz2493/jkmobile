// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Collections.Generic;
using System.Threading.Tasks;
using Foundation;
using JKMPCL;
using JKMPCL.Model;
using JKMPCL.Services;
using JKMPCL.Services.Estimate;
using UIKit;

namespace JKMIOSApp
{
    /// <summary>
    /// Class Name      : EstimateListViewController
    /// Author          : Hiren Patel
    /// Creation Date   : 16 JAN 2018
    /// Purpose         : To display estimate list for selection purpose to customer.
    /// Revision        : 
    /// </summary>
    public partial class EstimateListViewController : UIViewController
	{
        private readonly Estimate estimateServices;
        List<EstimateModel> estimateModelList;

        public EstimateListViewController(IntPtr handle) : base(handle)
        {
            estimateServices = new Estimate();
        }

        public EstimateListViewController()
        {
            // constructor
        }

        public async override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitilizeIntarface();
            await BindEstimatesList();
            tableRelaodAndSetData();
           

        }

        /// <summary>
        /// Method Name     : BindEstimatesList
        /// Author          : Hiren Patel
        /// Creation Date   : 25 Dec 2017
        /// Purpose         : To bind estimates list to table view.
        /// Revision        : 
        /// </summary>
        private async Task BindEstimatesList()
        {
            await GetEstimateList();
            tableRelaodAndSetData();
        }

        /// <summary>
        /// Method Name     : InitilizeIntarface
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To Initilizes the intarface.
        /// Revision        : 
        /// </summary>
        public void InitilizeIntarface()
        {
            // InitilizeIntarface
            UIHelper.SetDefaultWizardScrollViewBorderProperty(scrollviewTableContainer);
            btnContactUs.TouchUpInside += BtnContactUs_TouchUpInside;
            btnBookSelectedEstimate.TouchUpInside+= BtnBookSelectedEstimate_TouchUpInside;
            UtilityPCL.selectedMoveNumber = string.Empty;

        }

        /// <summary>
        /// Method Name     : tableRelaodAndSetData
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : Tables the relaod and set data.
        /// Revision        : 
        /// </summary>
        private void tableRelaodAndSetData()
        {
            tableViewEstimateList.Source = new EstimateListTableCellSource(estimateModelList,this);
            tableViewEstimateList.ReloadData();
        }

        /// <summary>
        /// Event Name      : BtnContactUs_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirect contactus page.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnContactUs_TouchUpInside(object sender, EventArgs e)
        {
            
            UIHelper.CallingScreen = JKMEnum.UIViewControllerID.EstimateListView;
            PerformSegue("estimatesListToContactUs",this);
        }

        /// <summary>
        /// Event Name      : BtnBookSelectedEstimate_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirect estimate review as wizard step 1.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnBookSelectedEstimate_TouchUpInside(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(UtilityPCL.selectedMoveNumber))
            {
                UIHelper.ShowMessage("Please select estimate");
            }
            else
            {
                PerformSegue("estimateListToEstimateReview", this);
            }
        }

        /// <summary>
        /// Event Name      : BtnViewEstimate_TouchUpInside
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To redirect estimate review pdf file.
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private void BtnViewEstimate_TouchUpInside(object sender, EventArgs e)
        {
            if (string.IsNullOrEmpty(UtilityPCL.selectedMoveNumber))
            {
                UIHelper.ShowMessage("Please select estimate");
            }
            else
            {
                UIHelper.CallingScreen = JKMEnum.UIViewControllerID.EstimateListView;
                UIHelper.RedirectToViewController(this, JKMEnum.UIViewControllerID.ViewEstimateReviewView);
               
                PerformSegue("estimatesListToViewEstimate", this);
            }
        }

        /// <summary>
        /// Method Name     : GetAlertsList
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : Get alert list from service
        /// Revision        : 
        /// </summary>
        public async Task GetEstimateList()
        {
            APIResponse<List<EstimateModel>> serviceResponse = new APIResponse<List<EstimateModel>>();
            estimateModelList = new List<EstimateModel>();
            serviceResponse.STATUS = false;
            string errorMessage = string.Empty;
            try
            {
                LoadingOverlay loadingOverlay = UIHelper.ShowLoadingScreen(View);
                serviceResponse = await estimateServices.GetEstimateData(UtilityPCL.LoginCustomerData.CustomerId);
                loadingOverlay.Hide();
                if (serviceResponse.STATUS)
                {
                    if (serviceResponse.DATA != null)
                    {
                        estimateModelList = serviceResponse.DATA;
                    }
                }
                else
                {
                    errorMessage = serviceResponse.Message;
                }
            }
            catch (Exception error)
            {
                errorMessage = error.Message;
            }
            finally
            {
                if (!string.IsNullOrEmpty(errorMessage))
                {
                    UIHelper.ShowMessage(errorMessage);
                }
            }
        }

    }
}