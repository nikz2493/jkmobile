// This file has been autogenerated from a class added in the UI designer.

using System;
using System.Linq;
using System.Threading.Tasks;
using JKMPCL.Common;
using JKMPCL.Model;
using JKMPCL.Services;
using JKMPCL.Services.Estimate;
using UIKit;

namespace JKMIOSApp
{
    /// <summary>
    /// Controller Name : MoveConfirmedViewController
    /// Author          : Hiren Patel
    /// Creation Date   : 16 JAN 2018
    /// Purpose         : To display move confirmed page screen as estimate wizard step
    /// Revision        : 
    /// </summary>
	public partial class MoveConfirmedViewController : UIViewController
    {
        private EstimateModel estimateModel;
        private readonly EstimateValidateServices estimateValidateServices;
        private readonly Estimate estimate;
        private LoadingOverlay loadingOverlay;
        public MoveConfirmedViewController(IntPtr handle) : base(handle)
        {
            estimateValidateServices = new EstimateValidateServices();
            estimate = new Estimate();
        }
        public override void ViewDidLoad()
        {
            base.ViewDidLoad();
            InitilizeIntarface();
            lblDepositCollected.Text = string.Empty;
            PopulateData();
        }

        public override void ViewWillAppear(bool animated)
        {
            base.ViewWillAppear(animated);
        }

        public override void ViewDidAppear(bool animated)
        {
            base.ViewDidAppear(animated);
        }

        /// <summary>
        /// Method Name     : InitilizeIntarface
        /// Author          : Hiren Patel
        /// Creation Date   : 29 Dec 2017
        /// Purpose         : To Initilizes the intarface.
        /// Revision        : 
        /// </summary>
        public void InitilizeIntarface()
        {
            // To Initilizes the intarface.
            btnGotToDashBoard.TouchUpInside += BtnGotToDashBoard_TouchUpInside;
        }

        /// <summary>
        /// Event Name     : btnGotToDashBoardPressed
        /// Author          : Hiren Patel
        /// Creation Date   : 5 Jan 2018
        /// Purpose         : To redirect dashboard screen
        /// Revision        : 
        /// </summary>
        /// <param name="sender">Sender.</param>
        /// <param name="e">Event Argument</param>
        private async void BtnGotToDashBoard_TouchUpInside(object sender, EventArgs e)
        {
            await GoToDesboardAsync();
        }

        /// <summary>
        /// Method Name     : PopulateData
        /// Author          : Hiren Patel
        /// Creation Date   : 2 Dec 2017
        /// Purpose         : fill Estimate Data  
        /// Revision        : 
        /// </summary>
        public void PopulateData()
        {
            viewDepositCollected.Hidden = true;
            viewTransactionDetails.Hidden = true;

            estimateModel = DTOConsumer.GetSelectedEstimate();
            int stepLenth = 10;
            if (estimateModel != null)
            {
                lblDepositCollected.Text = estimateModel.Deposit;
                lblTransactionId.Text = estimateModel.TransactionId;
                SetDataBaseOnPaymentMode(estimateModel);
               
                if(estimateModel.IsDepositPaid)
                {
                    stepLenth = 9;
                }
            }
            if(stepLenth==10)
            {
                imgBigStepNumber.Image = UIImage.FromFile("10.png");
            }
            else
            {
                imgBigStepNumber.Image = UIImage.FromFile("09.png");
            }
            UIHelper.CreateWizardHeader(stepLenth, viewHeader, estimateModel);
        }


        /// <summary>
        /// Method Name     : SetDataBaseOnPaymentMode
        /// Author          : Hiren Patel
        /// Creation Date   : 15 Fec 2018
        /// Purpose         : Sets the data base on payment mode.
        /// Revision        : 
        /// </summary>
        /// <param name="estimateModel">Estimate model.</param>
        private void SetDataBaseOnPaymentMode(EstimateModel estimateModel)
        {
            if (estimateModel.IsDepositPaidByCheck)
            {
                viewDepositCollected.Hidden = true;
                viewTransactionDetails.Hidden = true;
                SetMessage(estimateModel);
            }
            else if (estimateModel.PaymentStatus)
            {
                viewDepositCollected.Hidden = false;
                viewTransactionDetails.Hidden = false;

            }
            else 
            {
                SetMessage(estimateModel);
            }

        }

        private void SetMessage(EstimateModel estimateModel)
        {
            imgThumbIcon.Hidden = true;
            lblCongratulationTitle.Text = string.Empty;
            lblLine1.Text = string.Empty;
            lblLine2.Text = string.Empty;
            lblLine3.Text = string.Empty;
            lblLine4.Text = string.Empty;
            lblLine5.Text = string.Empty;

            if(estimateModel.IsDepositPaidByCheck)
            {
                lblLine1.Text = "We have received your request";
                lblLine2.Text = "for deposit payment with a check.";
                lblLine3.Text = "Our sales representative will contact you shortly";
                lblLine4.Text = "to guide you further.";
                lblLine5.Text = "You can go to dashboard and save your changes.";
            }
            else if (!estimateModel.PaymentStatus)
            {
                lblLine1.Text = "Sorry! Your payment was not successful.";
                UIHelper.SetLabelFont(lblLine1, JKMEnum.LinotteFont.LinotteSemiBold.GetStringValue());

                lblLine2.Text = "Don't worry though. You can go to dashboard,";
                lblLine3.Text = " and still save the move details.";
                lblLine4.Text = "Our sales representative will contact you shortly,";
                lblLine5.Text = "and help with the booking process";
            }

        }



        /// <summary>
        /// Method Name     : GoToDesboardAsync
        /// Author          : Hiren Patel
        /// Creation Date   : 1 Feb 2018
        /// Purpose         : Use for Update Estimed 
        /// Revision        : 
        /// </summary>
        private async Task GoToDesboardAsync()
        {
            string retMessage = string.Empty;
            try
            {
                // Valuation

                RemoveCurrencyFormat();

                ValuationDeductibleModel valuationDeductibleModel = UtilityPCL.ValuationDeductibleList().Where(a => a.DeductibleName == estimateModel.ValuationDeductible).SingleOrDefault();
                if (valuationDeductibleModel != null)
                {
                    estimateModel.ValuationDeductible = valuationDeductibleModel.DeductibleCode;
                }

                if (estimateModel.IsAddressEdited || estimateModel.IsServiceDate || estimateModel.IsWhatMatterMostEdited || estimateModel.IsValuationEdited)
                {
                    loadingOverlay = UIHelper.ShowLoadingScreen(View);
                    RemoveCurrencyFormat();
                    APIResponse<EstimateModel> aPIResponse = await estimate.PutEstimateData(estimateModel, estimateModel.MoveNumber);
                    loadingOverlay.Hide();
                    if (aPIResponse.STATUS)
                    {
                        await UpdateMoveDataAsync();
                    }
                    else
                    {
                        UIHelper.ShowMessage(aPIResponse.Message);
                    }
                }
                else
                {
                    await UpdateMoveDataAsync();
                }
            }
            catch (Exception error)
            {
                retMessage = error.Message;

            }
            finally
            {

                if (!string.IsNullOrEmpty(retMessage))
                {
                    UIHelper.ShowMessage(retMessage);
                }
            }
        }

        /// <summary>
        /// Method Name     : UpdateMoveDataAsync
        /// Author          : Hiren Patel
        /// Creation Date   : 1 Feb 2018
        /// Purpose         : Use for Update move data 
        /// Revision        : 
        /// </summary>
        public async Task UpdateMoveDataAsync()
        {
            Move move;
            move = new Move();
            if (DTOConsumer.dtoEstimateData != null)
            {
                estimateModel = DTOConsumer.GetSelectedEstimate();
                MoveDataModel dtoMoveData = DTOConsumer.dtoMoveData;


                dtoMoveData.StatusReason = GetMoveStatusReason(estimateModel);

                loadingOverlay = UIHelper.ShowLoadingScreen(View);
                APIResponse<MoveDataModel> aPIResponse = await move.PutMoveData(dtoMoveData, estimateModel.MoveNumber);
                if (aPIResponse.STATUS)
                {
                    await DTOConsumer.BindMoveDataAsync();
                    PerformSegue("MoveConfirmedToDashBoard", this);
                }
                else
                {
                    UIHelper.ShowMessage(aPIResponse.Message);
                }
                loadingOverlay.Hide();
            }
        }


        public string GetMoveStatusReason(EstimateModel estimateModel)
        {
            if (estimateModel.PaymentStatus)
            {
                return "100000000";
            }
            else
            {
                return "148050000"; //needs overrides
            }
        }


        /// <summary>
        /// Method Name     : UpdateMoveDataAsync
        /// Author          : Hiren Patel
        /// Creation Date   : 1 Feb 2018
        /// Purpose         : Removes the currency format.
        /// Revision        : 
        /// </summary>
        public void RemoveCurrencyFormat()
        {
            if (estimateModel != null)
            {
                if (!string.IsNullOrEmpty(estimateModel.ExcessValuation))
                {
                    estimateModel.ExcessValuation = UtilityPCL.RemoveCurrencyFormat(estimateModel.ExcessValuation);
                }
                if (!string.IsNullOrEmpty(estimateModel.ValuationCost))
                {
                    estimateModel.ValuationCost = UtilityPCL.RemoveCurrencyFormat(estimateModel.ValuationCost);
                }
                if (!string.IsNullOrEmpty(estimateModel.Deposit))
                {
                    estimateModel.Deposit = UtilityPCL.RemoveCurrencyFormat(estimateModel.Deposit);
                }
                if (!string.IsNullOrEmpty(estimateModel.EstimatedLineHaul))
                {
                    estimateModel.EstimatedLineHaul = UtilityPCL.RemoveCurrencyFormat(estimateModel.EstimatedLineHaul);
                }
            }
        }
    }
}
